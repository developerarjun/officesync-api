// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OfficeSync.Infrastructure.Persistence;

#nullable disable

namespace OfficeSync.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(OfficeSyncDbContext))]
    [Migration("20240728084713_AdminUsersSeed")]
    partial class AdminUsersSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OfficeSync.Domain.Entities.Master.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Module");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA",
                            Name = "User Management"
                        });
                });

            modelBuilder.Entity("OfficeSync.Domain.Entities.Master.RolePermissionsModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionsModule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = 1,
                            IsActive = false,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Action = 2,
                            IsActive = false,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Action = 3,
                            IsActive = false,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            Action = 4,
                            IsActive = false,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("OfficeSync.Domain.Entities.Master.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Super",
                            IsActive = true,
                            LastName = "Agent",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2023, 2, 28, 10, 10, 58, 959, DateTimeKind.Unspecified).AddTicks(6954), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Dibya",
                            IsActive = true,
                            LastName = "Joshi",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 7, 28, 8, 47, 13, 337, DateTimeKind.Unspecified).AddTicks(8475), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Sandesh",
                            IsActive = true,
                            LastName = "Thapa",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 7, 28, 8, 47, 13, 337, DateTimeKind.Unspecified).AddTicks(8620), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Abin",
                            IsActive = true,
                            LastName = "Shrestha",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 7, 28, 8, 47, 13, 337, DateTimeKind.Unspecified).AddTicks(8651), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Nabin",
                            IsActive = true,
                            LastName = "Khadka",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 7, 28, 8, 47, 13, 337, DateTimeKind.Unspecified).AddTicks(8681), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA"
                        });
                });

            modelBuilder.Entity("OfficeSync.Infrastructure.Persistence.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ParentRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ParentRefId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "647808af-878a-41e5-9d69-5796165214bd",
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        });
                });

            modelBuilder.Entity("OfficeSync.Infrastructure.Persistence.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultMfaProvider")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b91d74d8-5516-4cfb-b7e5-02d3885cb2bd",
                            DefaultMfaProvider = 0,
                            Email = "developerarjun1@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2023, 2, 28, 10, 10, 58, 959, DateTimeKind.Unspecified).AddTicks(6954), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA",
                            LockoutEnabled = true,
                            NormalizedEmail = "DEVELOPERARJUN1@GMAIL.COM",
                            NormalizedUserName = "DEVELOPERARJUN1@GMAIL.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "851536ae-aded-4c9d-b342-738d0fb066eb",
                            TwoFactorEnabled = false,
                            UserName = "developerarjun1@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b91d74d8-5516-4cfb-b7e5-02d3885cb2bd",
                            DefaultMfaProvider = 0,
                            Email = "developerdibya77@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 7, 28, 8, 47, 13, 337, DateTimeKind.Unspecified).AddTicks(8584), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA",
                            LockoutEnabled = true,
                            NormalizedEmail = "DEVELOPERDIBYA77@GMAIL.COM",
                            NormalizedUserName = "DEVELOPERDIBYA77@GMAIL.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "851536ae-aded-4c9d-b342-738d0fb066eb",
                            TwoFactorEnabled = false,
                            UserName = "developerdibya77@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b91d74d8-5516-4cfb-b7e5-02d3885cb2bd",
                            DefaultMfaProvider = 0,
                            Email = "sandeshthapa5907@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 7, 28, 8, 47, 13, 337, DateTimeKind.Unspecified).AddTicks(8631), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA",
                            LockoutEnabled = true,
                            NormalizedEmail = "SANDESHTHAPA5907@GMAIL.COM",
                            NormalizedUserName = "SANDESHTHAPA5907@GMAIL.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "851536ae-aded-4c9d-b342-738d0fb066eb",
                            TwoFactorEnabled = false,
                            UserName = "sandeshthapa5907@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b91d74d8-5516-4cfb-b7e5-02d3885cb2bd",
                            DefaultMfaProvider = 0,
                            Email = "shresthaabin88@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 7, 28, 8, 47, 13, 337, DateTimeKind.Unspecified).AddTicks(8661), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA",
                            LockoutEnabled = true,
                            NormalizedEmail = "SHRESTHAABIN88@GMAIL.COM",
                            NormalizedUserName = "SHRESTHAABIN88@GMAIL.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "851536ae-aded-4c9d-b342-738d0fb066eb",
                            TwoFactorEnabled = false,
                            UserName = "shresthaabin88@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b91d74d8-5516-4cfb-b7e5-02d3885cb2bd",
                            DefaultMfaProvider = 0,
                            Email = "nabinkhadka330@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 7, 28, 8, 47, 13, 337, DateTimeKind.Unspecified).AddTicks(8695), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "SA",
                            LockoutEnabled = true,
                            NormalizedEmail = "NABINKHADKA330@GMAIL.COM",
                            NormalizedUserName = "NABINKHADKA330@GMAIL.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "851536ae-aded-4c9d-b342-738d0fb066eb",
                            TwoFactorEnabled = false,
                            UserName = "nabinkhadka330@gmail.com"
                        });
                });

            modelBuilder.Entity("OfficeSync.Infrastructure.Persistence.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("OfficeSync.Infrastructure.Persistence.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("OfficeSync.Infrastructure.Persistence.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("OfficeSync.Infrastructure.Persistence.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("OfficeSync.Infrastructure.Persistence.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OfficeSync.Domain.Entities.Master.RolePermissionsModule", b =>
                {
                    b.HasOne("OfficeSync.Domain.Entities.Master.Module", "ModuleRef")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeSync.Infrastructure.Persistence.Identity.Role", "RoleRef")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleRef");

                    b.Navigation("RoleRef");
                });

            modelBuilder.Entity("OfficeSync.Infrastructure.Persistence.Identity.Role", b =>
                {
                    b.HasOne("OfficeSync.Infrastructure.Persistence.Identity.Role", "ParentRef")
                        .WithMany()
                        .HasForeignKey("ParentRefId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentRef");
                });

            modelBuilder.Entity("OfficeSync.Infrastructure.Persistence.Identity.User", b =>
                {
                    b.HasOne("OfficeSync.Domain.Entities.Master.UserProfile", "ProfileRef")
                        .WithOne("UserRef")
                        .HasForeignKey("OfficeSync.Infrastructure.Persistence.Identity.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileRef");
                });

            modelBuilder.Entity("OfficeSync.Infrastructure.Persistence.Identity.UserRole", b =>
                {
                    b.HasOne("OfficeSync.Infrastructure.Persistence.Identity.Role", "RoleRef")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OfficeSync.Infrastructure.Persistence.Identity.User", "UserRef")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleRef");

                    b.Navigation("UserRef");
                });

            modelBuilder.Entity("OfficeSync.Domain.Entities.Master.UserProfile", b =>
                {
                    b.Navigation("UserRef");
                });

            modelBuilder.Entity("OfficeSync.Infrastructure.Persistence.Identity.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
